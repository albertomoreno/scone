
import os
import re



test_name = re.compile('^.+?_unittest\.cpp$')

appname = 'scone'
apppath = '#bin'

include_paths = ['#include']
lib_paths = ['/usr/local/lib']

lst = ['collisions', 'common', 'scone', 'sprites']
srcs = []
for f in lst:
	srcs += Glob(f + '/*.cpp') + Glob(f + '/*/*.cpp')

editor_srcs = Glob('editor/*.cpp') + Glob('common/*.cpp')

libs = ['sfml-system', 'sfml-window', 'sfml-graphics', 'sfml-audio']
flags = ['-Wall', '-g']

# Command line arguments
test = ARGUMENTS.get('test', 0)
editor = ARGUMENTS.get('editor', 0)
gtest = ARGUMENTS.get('gtest_path', '../../gtest-1.6.0')
production = ARGUMENTS.get('production', 0)

include_paths.append(os.path.join(gtest, 'include'))
libs += ['gtest', 'pthread']
lib_paths.append(os.path.join(gtest, 'build'))

# Preparation for the production build
if int(production):
	flags.remove('-g')
	flags.append('-O3')

	srcs = filter(lambda x: str(x).find('/private-main.cpp') == -1, srcs)
else:
	srcs = filter(lambda x: str(x).find('/main.cpp') == -1, srcs)

# Preparation for the test build
if int(test):
	srcs = filter(lambda x: str(x).find('/main.cpp') == -1, srcs)
	srcs = filter(lambda x: str(x).find('/private-main.cpp') == -1, srcs)
	srcs.append(os.path.join(gtest, 'src', 'gtest_main.cc'))
	srcs += filter(lambda x: str(x).find('/main.cpp') == -1, Glob('editor/*.cpp'))

	appname += '-test'
else:
	srcs = filter(lambda x: test_name.match(str(x)) == None, srcs)
	editor_srcs = filter(lambda x: test_name.match(str(x)) == None, editor_srcs)

# Build the program
if editor:
	Program(os.path.join(apppath, "level-editor"), editor_srcs, CPPPATH=include_paths, LIBS=libs,
		LIBPATH=lib_paths, CPPFLAGS=flags)
else:
	Program(os.path.join(apppath, appname), srcs, CPPPATH=include_paths, LIBS=libs,
		LIBPATH=lib_paths, CPPFLAGS=flags)
